// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FAAAirportDataClient is the client API for FAAAirportData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FAAAirportDataClient interface {
	GetAirportData(ctx context.Context, in *RequestCode, opts ...grpc.CallOption) (*Airports, error)
}

type fAAAirportDataClient struct {
	cc grpc.ClientConnInterface
}

func NewFAAAirportDataClient(cc grpc.ClientConnInterface) FAAAirportDataClient {
	return &fAAAirportDataClient{cc}
}

func (c *fAAAirportDataClient) GetAirportData(ctx context.Context, in *RequestCode, opts ...grpc.CallOption) (*Airports, error) {
	out := new(Airports)
	err := c.cc.Invoke(ctx, "/startup.FAAAirportData/GetAirportData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FAAAirportDataServer is the server API for FAAAirportData service.
// All implementations must embed UnimplementedFAAAirportDataServer
// for forward compatibility
type FAAAirportDataServer interface {
	GetAirportData(context.Context, *RequestCode) (*Airports, error)
	mustEmbedUnimplementedFAAAirportDataServer()
}

// UnimplementedFAAAirportDataServer must be embedded to have forward compatible implementations.
type UnimplementedFAAAirportDataServer struct {
}

func (UnimplementedFAAAirportDataServer) GetAirportData(context.Context, *RequestCode) (*Airports, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirportData not implemented")
}
func (UnimplementedFAAAirportDataServer) mustEmbedUnimplementedFAAAirportDataServer() {}

// UnsafeFAAAirportDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FAAAirportDataServer will
// result in compilation errors.
type UnsafeFAAAirportDataServer interface {
	mustEmbedUnimplementedFAAAirportDataServer()
}

func RegisterFAAAirportDataServer(s grpc.ServiceRegistrar, srv FAAAirportDataServer) {
	s.RegisterService(&FAAAirportData_ServiceDesc, srv)
}

func _FAAAirportData_GetAirportData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FAAAirportDataServer).GetAirportData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/startup.FAAAirportData/GetAirportData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FAAAirportDataServer).GetAirportData(ctx, req.(*RequestCode))
	}
	return interceptor(ctx, in, info, handler)
}

// FAAAirportData_ServiceDesc is the grpc.ServiceDesc for FAAAirportData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FAAAirportData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "startup.FAAAirportData",
	HandlerType: (*FAAAirportDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAirportData",
			Handler:    _FAAAirportData_GetAirportData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bq.proto",
}
